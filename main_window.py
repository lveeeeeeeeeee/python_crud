# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'db.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sql_foundation as sq
from createwin import Ui_CreateWindow
from login import Ui_PasswordForm
from update_window import Ui_UPDATE


class QCreateWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(QCreateWindow, self).__init__()

    def closeEvent(self, event):
        close = QtWidgets.QMessageBox.question(
            self,
            "QUIT",
            "Please confirm",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No
            )
        if close == QtWidgets.QMessageBox.Yes:
            event.accept()
            MainWindow.setEnabled(True)
            ui.output_items_from_table()
        else:
            event.ignore()


class QLoginForm(QtWidgets.QMainWindow):
    def __init__(self):
        super(QLoginForm, self).__init__()

    def closeEvent(self, event: QtGui.QCloseEvent):
        MainWindow.setEnabled(True)
        ui.setupUi(MainWindow)
        event.accept()

    def shown(self):
        MainWindow.setEnabled(False)
        res = sq.check_from_cfg()
        if res:
            msg = QtWidgets.QMessageBox.question(
                self,
                "Connected",
                "The connection details are already correct.\nDo you want to change them?",
                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No
            )
            if msg == QtWidgets.QMessageBox.No:
                MainWindow.setEnabled(True)
                return
        self.show()


class QMain(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
    
    def closeEvent(self, event: QtGui.QCloseEvent):
        close = QtWidgets.QMessageBox.question(
            self,
            "QUIT",
            "Please confirm",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No
            )
        if close == QtWidgets.QMessageBox.Yes:
            event.accept()
            sq.drop_query_results()
            import sys
            sys.exit()
        else:
            event.ignore()


class QUpdate(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
    
    def closeEvent(self, event: QtGui.QCloseEvent):
        MainWindow.setEnabled(True)
        event.accept()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(550, 430)
        MainWindow.setMaximumSize(QtCore.QSize(600, 500))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.table_view = QtWidgets.QTableWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.table_view.sizePolicy().hasHeightForWidth())
        self.table_view.setSizePolicy(sizePolicy)
        self.table_view.setMinimumSize(QtCore.QSize(500, 300))
        self.table_view.setObjectName("table_view")
        self.gridLayout.addWidget(self.table_view, 0, 0, 1, 5)
        self.create_button = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.create_button.sizePolicy().hasHeightForWidth())
        self.create_button.setSizePolicy(sizePolicy)
        self.create_button.setMinimumSize(QtCore.QSize(160, 30))
        self.create_button.setObjectName("create_button")
        self.gridLayout.addWidget(self.create_button, 1, 0, 1, 1)
        self.update_button = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.update_button.sizePolicy().hasHeightForWidth())
        self.update_button.setSizePolicy(sizePolicy)
        self.update_button.setMinimumSize(QtCore.QSize(160, 30))
        self.update_button.setObjectName("update_button")
        self.gridLayout.addWidget(self.update_button, 1, 1, 1, 2)
        self.delete_button = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.delete_button.sizePolicy().hasHeightForWidth())
        self.delete_button.setSizePolicy(sizePolicy)
        self.delete_button.setMinimumSize(QtCore.QSize(160, 30))
        self.delete_button.setObjectName("delete_button")
        self.gridLayout.addWidget(self.delete_button, 1, 3, 1, 2)
        self.table_choice = QtWidgets.QComboBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.table_choice.sizePolicy().hasHeightForWidth())
        self.table_choice.setSizePolicy(sizePolicy)
        self.table_choice.setMinimumSize(QtCore.QSize(160, 28))
        self.table_choice.setObjectName("table_choice")
        self.gridLayout.addWidget(self.table_choice, 2, 0, 1, 1)
        self.back_button = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.back_button.sizePolicy().hasHeightForWidth())
        self.back_button.setSizePolicy(sizePolicy)
        self.back_button.setObjectName("back_button")
        self.gridLayout.addWidget(self.back_button, 2, 1, 1, 1)
        self.forward_button = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.forward_button.sizePolicy().hasHeightForWidth())
        self.forward_button.setSizePolicy(sizePolicy)
        self.forward_button.setObjectName("forward_button")
        self.gridLayout.addWidget(self.forward_button, 2, 2, 1, 1)
        self.text_item_count = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.text_item_count.sizePolicy().hasHeightForWidth())
        self.text_item_count.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.text_item_count.setFont(font)
        self.text_item_count.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.text_item_count.setObjectName("text_item_count")
        self.gridLayout.addWidget(self.text_item_count, 2, 3, 1, 1)
        self.item_count = QtWidgets.QSpinBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.item_count.sizePolicy().hasHeightForWidth())
        self.item_count.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.item_count.setFont(font)
        self.item_count.setMinimum(1)
        self.item_count.setMaximum(10)
        self.item_count.setObjectName("item_count")
        self.gridLayout.addWidget(self.item_count, 2, 4, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 550, 26))
        self.menuBar.setObjectName("menuBar")
        self.menuConnection = QtWidgets.QMenu(self.menuBar)
        self.menuConnection.setObjectName("menuConnection")
        self.menuQueries = QtWidgets.QMenu(self.menuBar)
        self.menuQueries.setObjectName("menuQueries")
        MainWindow.setMenuBar(self.menuBar)
        self.actionChange_details = QtWidgets.QAction(MainWindow)
        self.actionChange_details.setObjectName("actionChange_details")
        self.menuBar.addAction(self.menuConnection.menuAction())
        self.menuBar.addAction(self.menuQueries.menuAction())
        self.MainWindow = MainWindow

        self.retranslateUi(MainWindow)
        self.output_list_of_tables()
        self.output_items_from_table()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.table_view.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior.SelectRows)

        self.current_row = 0
        self.connect()

    def execute_query_groups_amount(self):
        sq.query_groups_amount()
        self.output_list_of_tables()
        self.table_choice.setCurrentText("query_result")
        self.default_cur_row()
        self.offset_output_items_from_table()

    def execute_query_subjects_amount(self):
        sq.query_subjects_amount()
        self.output_list_of_tables()
        self.table_choice.setCurrentText("query_result")
        self.default_cur_row()
        self.offset_output_items_from_table()

    def execute_query_avg_grades(self):
        sq.query_avg_grades()
        self.output_list_of_tables()
        self.table_choice.setCurrentText("query_result")
        self.default_cur_row()
        self.offset_output_items_from_table()

    def execute_query_avg_grades_for_subjects(self):
        sq.query_avg_grades_for_subjects()
        self.output_list_of_tables()
        self.table_choice.setCurrentText("query_result")
        self.default_cur_row()
        self.offset_output_items_from_table()

    def execute_query_students_amount(self):
        sq.query_students_amount()
        self.output_list_of_tables()
        self.table_choice.setCurrentText("query_result")
        self.default_cur_row()
        self.offset_output_items_from_table()

    def connect(self):
        self.item_count.valueChanged.connect(self.offset_output_items_from_table)
        self.table_choice.activated.connect(self.offset_output_items_from_table)
        self.table_choice.activated.connect(self.default_cur_row)
        
        self.forward_button.clicked.connect(self.forward)
        self.forward_button.clicked.connect(self.offset_output_items_from_table)

        self.back_button.clicked.connect(self.back)
        self.back_button.clicked.connect(self.offset_output_items_from_table)

        self.create_button.clicked.connect(self.create_button_clicked)

        self.db_action = QtWidgets.QAction("Change connection details", MainWindow)
        self.db_action.triggered.connect(LoginWindow.show)
        self.menuConnection.addAction(self.db_action)

        self.first_query = QtWidgets.QAction("Students count in groups", MainWindow)
        self.first_query.triggered.connect(self.execute_query_groups_amount)
        self.menuQueries.addAction(self.first_query)

        self.second_query = QtWidgets.QAction("Amount of students attending a subject", MainWindow)
        self.second_query.triggered.connect(self.execute_query_subjects_amount)
        self.menuQueries.addAction(self.second_query)

        self.third_query = QtWidgets.QAction("Average grades", MainWindow)
        self.third_query.triggered.connect(self.execute_query_avg_grades)
        self.menuQueries.addAction(self.third_query)

        self.fourth_query = QtWidgets.QAction("Average grades for subjects", MainWindow)
        self.fourth_query.triggered.connect(self.execute_query_avg_grades_for_subjects)
        self.menuQueries.addAction(self.fourth_query)

        self.fifth_query = QtWidgets.QAction("Amount of students learning from teachers", MainWindow)
        self.fifth_query.triggered.connect(self.execute_query_students_amount)
        self.menuQueries.addAction(self.fifth_query)

        self.delete_button.clicked.connect(self.confirm_deletion)

        self.update_button.clicked.connect(self.update_button_clicked)

    def enable_main(self):
        if MainWindow.isEnabled() != True:
            MainWindow.setEnabled(True)

    def create_button_clicked(self):          
        MainWindow.setEnabled(False)
        ui_create.fill_the_table(self.table_choice.currentText())
        CreateWindow.show()

    def update_button_clicked(self):
        MainWindow.setEnabled(False)
        ui_update.fill_the_table(self.table_choice.currentText())
        self.update_selected()
        UpdateWindow.show()
            
    def default_cur_row(self):
        self.current_row = 0

    def forward(self):
        self.add(self.item_count.value())

    def back(self):
        val = -self.item_count.value()
        self.add(val)

    def handle(self, e: Exception):
        msg = QtWidgets.QMessageBox.about(
            self.MainWindow,
            "ERROR", 
            f"Error!\n{e.args[0]}\nCan't connect to database."
        )  

    def add(self, val):
        try:
            count = sq.select(
                None, to_select="count(*)",
                tablename=self.table_choice.currentText(),
                limit=0
            )
            count = count[0][0]
            if 0 <= (val + self.current_row) <= count-1: 
                self.current_row += val
            if val + self.current_row < 0:
                self.current_row = 0
        
        except Exception as e:
            self.handle(e)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "CRUD"))
        self.create_button.setText(_translate("MainWindow", "Create"))
        self.update_button.setText(_translate("MainWindow", "Update"))
        self.delete_button.setText(_translate("MainWindow", "Delete"))
        self.back_button.setText(_translate("MainWindow", "Back"))
        self.forward_button.setText(_translate("MainWindow", "Forward"))
        self.menuConnection.setTitle(_translate("MainWindow", "Connection..."))
        self.menuQueries.setTitle(_translate("MainWindow", "Demo queries..."))
        self.actionChange_details.setText(_translate("MainWindow", "Change details"))

    def output_list_of_tables(self):
        names = sq.select(
            None, tablename="information_schema.tables",
            to_select="table_name",
            cond="table_schema = 'public'",
            limit=0
        )
        self.table_choice.clear()
        for elem in names:
            self.table_choice.addItem(elem[0])
    
    def output_items_from_table(self):
        self.table_view.clearContents()
        tablename = self.table_choice.currentText()
        columns = sq.select(
            None, tablename="information_schema.columns",
            to_select="column_name",
            cond=f"table_name = '{tablename}'",
            limit=0
        )
        for i in range(len(columns)):
            columns[i] = columns[i][0]
        rows = sq.select(
            None, 
            tablename=tablename,
            limit = self.item_count.value(),
            to_select=sq.pack_insert_query_vals(columns, False)
        )
        if rows == None:
            return
        self.table_view.setColumnCount(len(columns))
        self.table_view.setRowCount(len(rows))
        self.table_view.setHorizontalHeaderLabels(columns)
        for i in range(len(rows)):
            for j in range(len(columns)):
                item = QtWidgets.QTableWidgetItem(f"{rows[i][j]}")
                item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
                self.table_view.setItem(i, j, item)

        self.table_view.resizeColumnsToContents()

    def offset_output_items_from_table(self):
        self.table_view.clearContents()
        tablename = self.table_choice.currentText()
        columns = sq.select(
            None, tablename="information_schema.columns",
            to_select="column_name",
            cond=f"table_name = '{tablename}'",
            limit=0
        )
        for i in range(len(columns)):
            columns[i] = columns[i][0]
        rows = sq.select(
            None, 
            tablename=tablename,
            limit = self.item_count.value(),
            to_select=sq.pack_insert_query_vals(columns, False),
            offset=f"OFFSET {self.current_row}"
        )
        if rows == None:
            return
        self.table_view.setColumnCount(len(columns))
        self.table_view.setRowCount(len(rows))
        self.table_view.setHorizontalHeaderLabels(columns)
        for i in range(len(rows)):
            for j in range(len(columns)):
                item = QtWidgets.QTableWidgetItem(f"{rows[i][j]}")
                item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
                self.table_view.setItem(i, j, item)
                self.table_view.currentItem

        self.table_view.resizeColumnsToContents()

    def confirm_deletion(self):
        msg = QtWidgets.QMessageBox.question(
            MainWindow,
            "DELETE",
            "Selected items will be deleted.\nAre you sure?",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No
            )
        if msg == QtWidgets.QMessageBox.Yes:
            self.delete_selected()
            self.output_items_from_table()

    def delete_selected(self):
        selections = self.table_view.selectedRanges()
        for item in selections:
            for i in range(item.topRow(), item.bottomRow()+1):
                cond = []
                for j in range(item.leftColumn()+1, item.rightColumn()+1):
                    column_name = self.table_view.horizontalHeaderItem(j).text()
                    data = self.table_view.item(i, j).text()
                    if data.isdigit():
                        cond.append(f"{column_name} = {data}")
                    else:
                        cond.append(f"{column_name} = '{data}'")
                sq.delete_from_table(
                    None,
                    tablename=self.table_choice.currentText(),
                    cond=cond
                )
    
    def update_selected(self):
        selections = self.table_view.selectedRanges()
        all_conds = []
        for item in selections:
            for i in range(item.topRow(), item.bottomRow()+1):
                cond = []
                for j in range(item.leftColumn()+1, item.rightColumn()+1):
                    column_name = self.table_view.horizontalHeaderItem(j).text()
                    data = self.table_view.item(i, j).text()
                    if data.isdigit():
                        cond.append(f"{column_name} = {data}")
                    else:
                        cond.append(f"{column_name} = '{data}'")
                cond = sq._pack_conditions(cond)
                all_conds.append(cond)

        ui_update.get_item_conditions(all_conds)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    
    MainWindow = QMain()
    CreateWindow = QCreateWindow()
    LoginWindow = QLoginForm()
    UpdateWindow = QUpdate()
    
    ui_update = Ui_UPDATE()
    ui_create = Ui_CreateWindow()
    ui_login = Ui_PasswordForm()
    ui = Ui_MainWindow()
    ui_update.setupUi(UpdateWindow)
    ui_create.setupUi(CreateWindow)
    ui_login.setupUi(LoginWindow)
    ui.setupUi(MainWindow)
    
    MainWindow.show()
    LoginWindow.shown()
    
    sys.exit(app.exec_())